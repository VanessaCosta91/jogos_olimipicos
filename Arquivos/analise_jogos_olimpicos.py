# -*- coding: utf-8 -*-
"""analise_jogos_olimpicos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W_iJUjYHISWqNYt85AUUmFP8ppn8U0dJ
"""

# Instalação dos pacotes necessários
!pip install google-cloud-bigquery
!pip install pandas-gbq

import pandas_gbq
from google.cloud import bigquery
import pandas as pd
import seaborn as sns

# Leitura dos DataFrames

# Query com informações sobre atletas
query1 = """
        select
          ab.name as athlete_name, ab.sex,ab.birth_year, ab.height, ab.weight,ab.country,
           aer.edition, aer.sport, aer.event, aer.medal, aer.is_team_sport
        from basedosdados.world_olympedia_olympics.athlete_bio as ab
        left join basedosdados.world_olympedia_olympics.athlete_event_result as aer
        on ab.athlete_id = aer.athlete_id;
"""
# Query com informações sobre os jogos
query2 = """
        select
          g.year, g.edition, g.city, g.country_flag_url, g.is_held,
          gm.country, gm.gold, gm.silver, gm.bronze, gm.total as total_medals
        from basedosdados.world_olympedia_olympics.game as g
        left join basedosdados.world_olympedia_olympics.game_medal_tally as gm
        on g.edition_id = gm.edition_id;
"""

# Leitura dos dados do BigQuery
df_atletas= pandas_gbq.read_gbq(query1, project_id='analise-jogos-olimpicos')
df_jogos = pandas_gbq.read_gbq(query2, project_id='analise-jogos-olimpicos')

# Entendo os Dados de df_atletas_pd
print('Info atletas')
df_atletas.info()
print('\nDescribe atletas\n', df_atletas.describe(include='all'))
print('\nIsnull atletas\n', df_atletas.isnull().sum())

# Entendo os Dados de df_jogos_pd
print('\nInfo jogos')
df_jogos.info()
print('\nDescribe jogos\n', df_jogos.describe(include='all'))
print('\nIsnull jogos\n', df_jogos.isnull().sum())

# filtro tipo: durante a analise exploratoria foi identicado que a base de dados contem tipo de jogos diferentes de olimpiadas de inverno e verão, as quais são o alvo desse analise
df_atletas['tipo_edicao'] = df_atletas['edition'].str.extract(r'\d{4} (.+)')
print('Atletas:',df_atletas.head().to_string())

df_atletas = df_atletas[df_atletas['tipo_edicao'].isin(['Summer Olympics', 'Winter Olympics'])]

df_jogos['tipo_edicao'] = df_jogos['edition'].str.extract(r'\d{4} (.+)')
print('Jogos: ', df_jogos.head().to_string())

df_jogos = df_jogos[df_jogos['tipo_edicao'].isin(['Summer Olympics', 'Winter Olympics'])]

#verifica duplicadas
print('df_atletas duplicadas: ', df_atletas.duplicated().sum())
print('df_jogos duplicadas: ', df_jogos.duplicated().sum())

# entendendo duplicadas por amostragem
df_atletas[df_atletas.duplicated()]

# confirmando duplicadas por amostragem
dup1 = df_atletas[df_atletas['athlete_name'] == 'Michael Phelps']


dup2 = df_atletas[(df_atletas['athlete_name'] == 'Michael Phelps') & (df_atletas['edition'] == '2008 Summer Olympics')]

print('Filtro 1\n', dup1.head().to_string())
print('\nFiltro 2\n', dup2.to_string())

"""A duplicidade dos nomes dos atletas se deu  dá pela necessidade de sperar as informações por tipo de evento, e vinculocas medadalhas ganhas. Optou-se então por mander duas bases de dados, um limpa (para calculo de metricas, medias e afins) e outra completa para calculo de medalhas"""

# Remover duplicatas
df_atletas_limpo = df_atletas.drop_duplicates()

#verifica duplicadas apos remoção
print('df_atletas duplicadas: ', df_atletas_limpo.duplicated().sum())

#criação da coluna ano
df_atletas_limpo['ano'] = df_atletas_limpo['edition'].str.extract(r'(\d{4})').astype(int)

#criação da coluna idade
df_atletas_limpo['idade'] = df_atletas_limpo['ano'] - df_atletas_limpo['birth_year']

#conferi daframe

print(df_atletas_limpo.head().to_string())

# Análise exploratória df_atletas

import matplotlib.pyplot as plt

# distribuição de altura dos atletas
plt.figure(figsize=(15, 6))
sns.histplot(df_atletas_limpo['height'], kde=True)
plt.title('Distribuição da Altura dos Atletas')
plt.xlabel('Altura (cm)')
plt.xticks(range(10, 300, 10))
plt.show()

# distribuição de peso dos atletas
plt.figure(figsize=(15, 6))
sns.histplot(df_atletas_limpo['weight'], kde=True)
plt.title('Distribuição do Peso dos Atletas')
plt.xlabel('Peso')
plt.xticks(range(10, 200, 10))
plt.show()

# distribuição de idade dos atletas
plt.figure(figsize=(15, 6))
sns.histplot(df_atletas_limpo['idade'], kde=True)
plt.title('Distribuição da Idade dos Atletas')
plt.xlabel('Idade')
plt.xticks(range(1, 100, 5))
plt.show()

"""Pelos gráficos de distribuição verifica-se que a maior concentração de altleta sua altura entre 170 e 180 cm, peso entre 60 e 80 kg e idade entre 22 e 27 anos."""

# correção entre altura, peso e dos atletas
corr = df_atletas_limpo[['height', 'weight', 'idade']].corr()
sns.heatmap(corr, annot=True, cmap='coolwarm',linewidths=0.1)
plt.title('Correlação entre Variáveis')

"""Pelo mapa de calor vê-se que existe uma boa correlação entre altura e peso, a idade não influencia tanto"""

#vericando se outliers
sns.boxplot(x=df_atletas['height'])
plt.title('Boxplot da Altura')
plt.show()

sns.boxplot(x=df_atletas_limpo['weight'])
plt.title('Boxplot do Peso')
plt.show()

sns.boxplot(x=df_atletas_limpo['idade'])
plt.title('Boxplot do Idade')
plt.show()

#vericando se outliers existem por caracterisca especificas exigidas pelo esporte e/ou sexo

top_esportes = df_atletas_limpo['sport'].value_counts().head(20).index # optou-se por selecionar top 20 para facilitar leitura
df_top = df_atletas_limpo[df_atletas_limpo['sport'].isin(top_esportes)]

#altura
plt.figure(figsize=(12, 6))
sns.boxplot(x='sport', y='height', hue='sex', data=df_top)
plt.xticks(rotation=90)  # agora vai dar pra ler melhor
plt.title('Altura dos atletas agrupadas pelos 20 princiais estortes')
plt.xlabel('Esporte')
plt.ylabel('Altura (cm)')
plt.legend(title='Sexo')
plt.tight_layout()
plt.show()

#peso
plt.figure(figsize=(12, 6))
sns.boxplot(x='sport', y='weight', hue='sex', data=df_top)
plt.xticks(rotation=90)  # agora vai dar pra ler melhor
plt.title('Peso dos atletas agrupadas pelos 20 princiais estortes')
plt.xlabel('Esporte')
plt.ylabel('Peso')
plt.legend(title='Sexo')
plt.tight_layout()
plt.show()

#idade
plt.figure(figsize=(12, 6))
sns.boxplot(x='sport', y='idade', hue='sex', data=df_top)
plt.xticks(rotation=90)  # agora vai dar pra ler melhor
plt.title('Idade dos atletas agrupadas pelos 20 princiais estortes')
plt.xlabel('Esporte')
plt.ylabel('Idade')
plt.legend(title='Sexo')
plt.tight_layout()
plt.show()

"""Alguns esporte possuem um média de altura e peso maior, como é o caso do basket. No panorama geral homens tem altura e peso maior que das mulhores, mas quando se fala e idade as média são mais igualitarias e no boxing as mulheres são mais velhas que os homens. o tiro esportivo aceita atletas com mais velhos"""

# Média de idade por edição
idade_grupo = df_atletas_limpo.groupby(['edition', 'tipo_edicao'])['idade'].mean().reset_index()

# Filtrando para cada tipo
idade_summer = idade_grupo[idade_grupo['tipo_edicao'] == 'Summer Olympics']
idade_winter = idade_grupo[idade_grupo['tipo_edicao'] == 'Winter Olympics']

#  Summer Olympics
plt.figure(figsize=(12,5))
plt.plot(idade_summer['edition'], idade_summer['idade'], label='Summer Olympics', color='orange')
plt.xticks(rotation=90)
plt.title('Média de Idade - Summer Olympics')
plt.xlabel('Edição')
plt.ylabel('Idade')
plt.grid(True)
plt.tight_layout()
plt.show()

# Winter Olympics
plt.figure(figsize=(12,5))
plt.plot(idade_winter['edition'], idade_winter['idade'], label='Winter Olympics', color='blue')
plt.xticks(rotation=90)
plt.title('Média de Idade - Winter Olympics')
plt.xlabel('Edição')
plt.ylabel('Idade')
plt.grid(True)
plt.tight_layout()
plt.show()

"""A  média de idade dos jogos olímpicos de verão teve uma caída significativa a partir da edição de 1948, e começou a subir a partir da ediçao de 1980, mas mesmo assim esta bem abaixo das edições das decadas de 20 e 30.

A  média de idade dos jogos olímpicos de inverno teve uma caída significativa a partir da edição de 1948, e começou a subir a partir da ediçao de 1984, e se aproxime da média de edade das decadas passadas
"""

# identificando tipos de jogos
tipos_edicoes = df_atletas_limpo['tipo_edicao'].unique()
print('Tipos edicões\n', tipos_edicoes)

qte_edicao = df_atletas_limpo.groupby('tipo_edicao')['tipo_edicao'].count()
print('\nQuantidade de edições\n', qte_edicao)

#conta medalhas
medalhas = df_atletas.dropna(subset=['medal'])
medalhas_por_pais = medalhas.groupby('country')['medal'].count().sort_values(ascending=False).head(50)

#mostrar 50 maiores medalhistas
plt.figure(figsize=(15, 6))
medalhas_por_pais.plot(kind='bar', title='Os 50 países com mais medalhas')
plt.ylabel('Quantidade de Medalhas')
plt.show()

"""O estados unidos é o maior metalhista de todos os tempos"""

# Edições não realizadas
df_jogos[df_jogos['is_held'].notna()][['year', 'edition', 'is_held']]

"""Cinco edições não foram realizadas por causa da guerra"""

#verificar nulos
# Entendo os Dados de df_atletas_pd
print('Info atletas')
df_atletas_limpo.info()
print('\nIsnull atletas\n', df_atletas_limpo.isnull().sum())

# Entendo os Dados de df_jogos_pd
print('\nInfo jogos')
df_jogos.info()
print('\nIsnull jogos\n', df_jogos.isnull().sum())

# converter tipo de 'idade' para padronizar com height e weight tratar melho valorres com nan
df_atletas_limpo['idade'] = df_atletas_limpo['idade'].astype('float')



print(df_atletas_limpo.info())

# Tratar nulos
# Ver proporção de nulos
df_atletas_limpo[['height', 'weight', 'idade']].isnull().mean()

# remover registos nulos
df_atletas_limpo = df_atletas_limpo.dropna(subset=['height', 'weight', 'birth_year'], how='any')
df_jogos = df_jogos.dropna(subset=['total_medals'], how='any')

print('Info atletas')
df_atletas_limpo.info()

# Preechendo valores nulos
df_atletas_limpo['medal']= df_atletas_limpo['medal'].fillna('nenhuma')
df_jogos['is_held']= df_jogos['is_held'].fillna('realizado')


# Verficar nulos apos remoção
print('\nIsnull atletas\n', df_atletas_limpo.isnull().sum())
print('\nIsnull jogos\n', df_jogos.isnull().sum())

# Padronização das colunas de texto
cols_atletas = ['athlete_name','sex', 'sport', 'country', 'edition', 'event', 'medal', 'tipo_edicao']
for col in cols_atletas:
    df_atletas[col] = df_atletas[col].astype(str).str.strip().str.title()

for col in cols_atletas:
    df_atletas_limpo[col] = df_atletas_limpo[col].astype(str).str.strip().str.title()

col_jogos = ['edition', 'city', 'is_held', 'country']
for col in col_jogos:
    df_jogos[col] = df_jogos[col].astype(str).str.strip().str.title()

#revisao
print(df_atletas.info())
print(df_atletas_limpo.info())
print(df_jogos.info())


print(df_atletas.head().to_string())
print(df_atletas_limpo.head().to_string())
print(df_jogos.head().to_string())

#verifcando valores em 'medal'
print(df_atletas_limpo['medal'].unique())

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression, LinearRegression
from sklearn.metrics import root_mean_squared_error, accuracy_score, precision_score, recall_score, r2_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
import joblib

# categorização de medalhas
  df_atletas_limpo['medal_categoria'] =   df_atletas_limpo['medal'].apply(lambda x: 0 if (pd.isna(x) or x == 'Nenhuma') else 1)

  #verifcando valores em de nova coluna
  print('Valores de metal_categoria: ',df_atletas_limpo['medal_categoria'].unique())
  print(df_atletas_limpo[['medal', 'medal_categoria']].head(15))

# Separar colunas numéricas e categóricas
colunas_cat = ['sex', 'sport', 'country', 'is_team_sport']

# Codificando as categóricas, criando novas colunas
for col in colunas_cat:
    label_encoder = LabelEncoder()
    df_atletas_limpo[f'{col}_cod'] = label_encoder.fit_transform(df_atletas_limpo[col].astype(str))

print(df_atletas_limpo.head().to_string())

X = df_atletas_limpo[['sex_cod', 'sport_cod', 'country_cod', 'is_team_sport_cod']] # preditor
Y = df_atletas_limpo['medal_categoria'] # prever

# dividir dados: treinamento e teste
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.8, random_state=42)

# criar e treinar modelo - regressão logística
modelo_lr = LogisticRegression(class_weight='balanced',random_state=42)
modelo_lr.fit(X_train, Y_train)

# prever valores de teste
Y_prev_lr = modelo_lr.predict(X_test)

# métricas de avaliação - regressão logística
accuracy_lr = accuracy_score(Y_test, Y_prev_lr)
precision_lr = precision_score(Y_test, Y_prev_lr)
recall_lr = recall_score(Y_test, Y_prev_lr)

print(f'\nAcurácia da Regressão Logística: {accuracy_lr:.2f}')
print(f'Precisão da Regressão Logística: {precision_lr: .2f}')
print(f'Recall da Regressão Logística: {recall_lr:.2f}')

# salvar treinamento
joblib.dump(modelo_lr, 'modelo_regressao_logistica.pkl')

# Calcula média de idade agrupada por ano
idade_media_por_ano = df_atletas_limpo.groupby('ano')['idade'].mean().reset_index()
idade_media_por_ano.head()

x = idade_media_por_ano[['ano']] # preditor
y = idade_media_por_ano['idade'] # prever


# criar e treinar modelo de regressao
modelo_linear = LinearRegression()
modelo_linear.fit(x, y)


import numpy as np
# Prever anos futuros
anos_futuros = np.array([[2028], [2032], [2036]])
idade_prevista = modelo_linear.predict(anos_futuros)

# Mostrar previsões
for ano, idade in zip(anos_futuros.flatten(), idade_prevista):
    print(f'Ano: {ano}, Idade média prevista: {idade:.2f} anos')



plt.scatter(x, y, color='blue', label='Idade média real') # Plotar dados reais
plt.plot(x, modelo_linear.predict(x), color='red', label='Regressão Linear') # Plotar a linha da regressão
plt.scatter(anos_futuros, idade_prevista, color='green', label='Previsões Futuras', marker='x') # Plotar as previsões futuras
plt.title('Previsão da Idade Média dos Atletas por Ano')
plt.xlabel('Ano')
plt.ylabel('Idade Média')
plt.legend()
plt.grid(True)
plt.show()

#criando dataframe para contar medalhas
df_atletas_medalhas = df_atletas[['athlete_name', 'event', 'medal', 'country', 'edition', 'tipo_edicao']]
print(df_atletas_medalhas.head().to_string())

from pandas_gbq import to_gbq

#salvando data frame no bigquery
to_gbq(df_atletas_limpo, destination_table='dados_jogos.dados_atletas_limpo', project_id='analise-jogos-olimpicos', if_exists='replace')

to_gbq(df_atletas_medalhas, destination_table='dados_jogos.dados_atletas_medalhas', project_id='analise-jogos-olimpicos', if_exists='replace')

to_gbq(df_jogos, destination_table='dados_jogos.dados_jogos', project_id='analise-jogos-olimpicos', if_exists='replace')